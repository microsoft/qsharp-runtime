<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.Quantum.Qir.Serialization" #>
//----------------------------------------------------------------------------------------------------------------------
// <auto-generated />
// This code was generated by the Microsoft.Quantum.Qir.Runtime.Tools package.
// The purpose of this source code file is to provide an entry-point for executing a QIR program.
// It handles parsing of command line arguments, and it invokes an entry-point function exposed by the QIR program.
//----------------------------------------------------------------------------------------------------------------------

#include <fstream>
#include <iostream>
#include <map>
#include <memory>
#include <vector>

#include "CLI11.hpp"

<# foreach (var header in RuntimeInitializer.Headers) { #>
#include "<#= header #>"
<# } #>

using namespace std;
<# if (EntryPoint.ContainsArgumentType(DataType.ArrayType)) { #>

// Auxiliary functions for interop with Q# Array type.
struct InteropArray
{
    int64_t Size;
    void* Data;

    InteropArray(int64_t size, void* data) :
        Size(size),
        Data(data){}
};

template<typename T>
unique_ptr<InteropArray> CreateInteropArray(vector<T>& v)
{
    unique_ptr<InteropArray> array(new InteropArray(v.size(), v.data()));
    return array;
}

template<typename S, typename D>
void TranslateVector(vector<S>& sourceVector, vector<D>& destinationVector, function<D(S&)> translationFunction)
{
    destinationVector.resize(sourceVector.size());
    transform(sourceVector.begin(), sourceVector.end(), destinationVector.begin(), translationFunction);
}
<# } #>
<# if (EntryPoint.ContainsArgumentType(DataType.RangeType) || EntryPoint.ContainsArrayType(DataType.RangeType)) { #>

// Auxiliary functions for interop with Q# Range type.
using RangeTuple = tuple<int64_t, int64_t, int64_t>;
struct InteropRange
{
    int64_t Start;
    int64_t Step;
    int64_t End;

    InteropRange() :
        Start(0),
        Step(0),
        End(0){}

    InteropRange(RangeTuple rangeTuple) :
        Start(get<0>(rangeTuple)),
        Step(get<1>(rangeTuple)),
        End(get<2>(rangeTuple)){}
};

unique_ptr<InteropRange> CreateInteropRange(RangeTuple rangeTuple)
{
    unique_ptr<InteropRange> range(new InteropRange(rangeTuple));
    return range;
}

InteropRange* TranslateRangeTupleToInteropRangePointer(RangeTuple& rangeTuple)
{
    InteropRange* range = new InteropRange(rangeTuple);
    return range;
}
<# } #>
<# if (EntryPoint.ContainsArrayType(DataType.RangeType)) { #>

// Auxiliary functions for interop with Q# Range[] type
template<typename T>
void FreePointerVector(vector<T*>& v)
{
    for (auto p : v)
    {
        delete p;
    }
}
<# } #>
<# if (EntryPoint.ContainsArgumentType(DataType.BoolType) || EntryPoint.ContainsArrayType(DataType.BoolType)) { #>

// Auxiliary functions for interop with Q# Bool type.
const char InteropFalseAsChar = 0x0;
const char InteropTrueAsChar = 0x1;
map<string, bool> <#= QirCppInterop.CliOptionTransformerMapName(DataType.BoolType) #>{
    {"0", InteropFalseAsChar},
    {"false", InteropFalseAsChar},
    {"1", InteropTrueAsChar},
    {"true", InteropTrueAsChar}
};
<# } #>
<# if (EntryPoint.ContainsArgumentType(DataType.PauliType) || EntryPoint.ContainsArrayType(DataType.PauliType)) { #>

// Auxiliary functions for interop with Q# Pauli type.
map<string, char> <#= QirCppInterop.CliOptionTransformerMapName(DataType.PauliType) #>{
    {"PauliI", 0},
    {"PauliX", 1},
    {"PauliY", 3},
    {"PauliZ", 2}
};

<# } #>
<# if (EntryPoint.ContainsArgumentType(DataType.ResultType) || EntryPoint.ContainsArrayType(DataType.ResultType)) { #>

// Auxiliary functions for interop with Q# Result type.
const char InteropResultZeroAsChar = 0x0;
const char InteropResultOneAsChar = 0x1;
map<string, char> <#= QirCppInterop.CliOptionTransformerMapName(DataType.ResultType) #>{
    {"0", InteropResultZeroAsChar},
    {"Zero", InteropResultZeroAsChar},
    {"1", InteropResultOneAsChar},
    {"One", InteropResultOneAsChar}
};
<# } #>
<# if (EntryPoint.ContainsArgumentType(DataType.StringType) || EntryPoint.ContainsArrayType(DataType.StringType)) { #>

// Auxiliary functions for interop with Q# String type.
const char* TranslateStringToCharBuffer(string& s)
{
    return s.c_str();
}
<# } #>

extern "C" void <#= EntryPoint.Name #>(
<# for (int i = 0; i < EntryPoint.Parameters.Count; i++) {
    var arg = EntryPoint.Parameters[i];
    var isLastArg = i == (EntryPoint.Parameters.Count-1); #>
    <#= arg.InteropType() #> <#= arg.Name #><#= (isLastArg) ? "" : "," #>
<# } #>
); // QIR interop function.

int main(int argc, char* argv[])
{
    CLI::App app("QIR Standalone Entry Point");

<# var initializerReader = new StringReader(RuntimeInitializer.Generate());
   string line;
   while((line = initializerReader.ReadLine()) != null) { #>
    <#= line #>
<# } #>

<# if (EntryPoint.Parameters.Count > 0) { #>
    // Add a command line option for each entry-point parameter.
<# } #>
<# foreach (var arg in EntryPoint.Parameters) { #>
    <#= arg.CliOptionType() #> <#= arg.CliOptionVariableName() #>;
<# if (arg.CliOptionVariableDefaultValue() != null) { #>
    <#= arg.CliOptionVariableName() #> = <#= arg.CliOptionVariableDefaultValue() #>;
<# } #>
    app.add_option("<#= arg.CliOptionName() #>", <#= arg.CliOptionVariableName() #>, "<#= arg.CliOptionDescription() #>")
        ->required()<#= arg.CliOptionTransformerMapName() != null ? "" : ";" #>
<# if (arg.CliOptionTransformerMapName() != null) { #>
        ->transform(CLI::CheckedTransformer(<#= arg.CliOptionTransformerMapName() #>, CLI::ignore_case));
<# } #>

<# } #>
    // After all the options have been added, parse arguments from the command line.
    CLI11_PARSE(app, argc, argv);

<# if (EntryPoint.Parameters.Count > 0) { #>
    // Cast parsed arguments to its interop types.
<# } #>
<# foreach (var arg in EntryPoint.Parameters) { #>
<# if (arg.Type == DataType.ArrayType) { 
    var arrayInteropTranslator = QirCppInterop.CliOptionTypeToInteropTypeTranslator(arg.ArrayType); #>
<# if (arrayInteropTranslator == null) { #>
    unique_ptr<InteropArray> <#= arg.UniquePtrVariableName() #> = CreateInteropArray(<#= arg.CliOptionVariableName() #>);
<# } #>
<# else {
    var arrayCliOptionType = QirCppInterop.CliOptionType(arg.ArrayType);
    var arrayInteropType = QirCppInterop.InteropType(arg.ArrayType); #>
    vector<<#= arrayInteropType #>> <#= arg.IntermediateVariableName() #>;
    TranslateVector<<#= arrayCliOptionType #>, <#= arrayInteropType #>>(<#= arg.CliOptionVariableName() #>, <#= arg.IntermediateVariableName() #>, <#= arrayInteropTranslator #>);
    unique_ptr<InteropArray> <#= arg.UniquePtrVariableName() #> = CreateInteropArray(<#= arg.IntermediateVariableName() #>);
<# } #>
    InteropArray* <#= arg.InteropVariableName() #> = <#= arg.UniquePtrVariableName() #>.get();
<# } #>
<# else { 
    var interopTranslator = QirCppInterop.CliOptionTypeToInteropTypeTranslator(arg.Type); #>
<# if (interopTranslator == null) { #>
    <#= arg.InteropType() #> <#= arg.InteropVariableName() #> = <#= arg.CliOptionVariableName() #>;
<# } #>
<# else { #>
    <#= arg.InteropType() #> <#= arg.InteropVariableName() #> = <#= interopTranslator #>(<#= arg.CliOptionVariableName() #>);
<# } #>
<# } #>

<# } #>
    // Execute the entry point operation.
    <#= EntryPoint.Name #>(
<# for (int i = 0; i < EntryPoint.Parameters.Count; i++) {
    var arg = EntryPoint.Parameters[i];
    var isLastArg = i == (EntryPoint.Parameters.Count-1); #>
        <#= arg.InteropVariableName() #><#= (isLastArg) ? "" : "," #>
<# } #>
    );

    // Flush the output of the simulation.
    cout.flush();

    return 0;
}
