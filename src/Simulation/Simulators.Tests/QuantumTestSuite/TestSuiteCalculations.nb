(* Copyright (c) Microsoft Corporation. All rights reserved. *)
(* Licensed under the MIT License. *)

(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     73232,       1269]
NotebookOptionsPosition[     71731,       1213]
NotebookOutlinePosition[     72074,       1228]
CellTagsIndexPosition[     72031,       1225]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Prerequisites", "Chapter",
 CellChangeTimes->{{3.7184788997811823`*^9, 3.7184789052925544`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Id", ",", "X", ",", "Y", ",", "Z"}], "}"}], "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"PauliMatrix", "[", "k", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "3"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tp", " ", "=", " ", "KroneckerProduct"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Dagger", " ", "=", " ", "ConjugateTranspose"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"zeroSt", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"oneSt", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plusSt", " ", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "/", 
    RowBox[{"Sqrt", "[", "2", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"iSt", " ", "=", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "I"}], "}"}], "/", 
    RowBox[{"Sqrt", "[", "2", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DensityMatr", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"Dagger", "[", 
      RowBox[{"{", "x", "}"}], "]"}], ".", 
     RowBox[{"{", "x", "}"}]}], "//", "Transpose"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "This", " ", "is", " ", "ordering", " ", "used", " ", "everywhere", " ", 
    "in", " ", "the", " ", "TestSuite"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fullBasis", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"zeroSt", ",", "oneSt", ",", "plusSt", ",", "iSt"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AsQDoubleArr", "[", "l_List", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"CForm", "[", 
         RowBox[{"N", "[", "#", "]"}], "]"}], "]"}], "&"}], "/@", "l"}], "//", 
     RowBox[{
      RowBox[{"Riffle", "[", 
       RowBox[{"#", ",", "\"\<;\>\""}], "]"}], "&"}]}], "//", "StringJoin"}], 
   "//", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"\"\<[\>\"", "~~", "#", "~~", "\"\<]\>\""}], ")"}], 
    "&"}]}]}]}], "Input",
 CellChangeTimes->{{3.718478910443024*^9, 3.718479218281523*^9}, {
  3.718479248879512*^9, 3.718479263034215*^9}, {3.7184793975740213`*^9, 
  3.7184795991372766`*^9}, {3.7184796315949745`*^9, 3.7184797046591806`*^9}, {
  3.7184798375361357`*^9, 3.7184798433353157`*^9}, {3.7184800446945333`*^9, 
  3.718480077458357*^9}, {3.7187181677029185`*^9, 3.718718172473008*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"AsQArr", "[", 
    RowBox[{"s_String", ",", " ", "level_"}], " ", "]"}], ":=", " ", "s"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AsQArr", "[", 
    RowBox[{"0", ",", " ", "level_"}], " ", "]"}], ":=", " ", "\"\<  O\>\""}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AsQArr", "[", 
   RowBox[{"l_List", ",", " ", 
    RowBox[{"level_", " ", ":", " ", "0"}]}], " ", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"AsQArr", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"level", "+", "1"}]}], " ", "]"}], "&"}], "/@", "l"}], "//", 
     RowBox[{
      RowBox[{"Riffle", "[", 
       RowBox[{"#", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"level", "\[Equal]", "0"}], ",", "\"\<;\\n\>\"", ",", 
          "\"\<;\>\""}], "]"}]}], "]"}], "&"}]}], "//", "\[IndentingNewLine]",
     "StringJoin"}], "//", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"level", "\[Equal]", "1"}], ",", "\"\<     [\>\"", ",", 
        "\"\<[\>\""}], "]"}], "~~", "#", "~~", "\"\<]\>\""}], ")"}], 
    "&"}]}]}]}], "Input",
 CellChangeTimes->{{3.718717964864356*^9, 3.718718020613718*^9}, {
   3.7187181124608784`*^9, 3.7187181126268125`*^9}, {3.7187181784710913`*^9, 
   3.718718185125663*^9}, {3.718718237591975*^9, 3.7187182861989775`*^9}, {
   3.718718351396096*^9, 3.7187184780481606`*^9}, 3.718720367009722*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.718718297010992*^9, 3.7187182978963203`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["PauliExpectation.qs", "Chapter",
 CellChangeTimes->{3.7184788834158244`*^9, 3.7186466473395104`*^9}],

Cell[CellGroupData[{

Cell["ExpectedValueForPauli", "Section",
 CellChangeTimes->{{3.7184788926643867`*^9, 3.7184788949642396`*^9}, 
   3.718646644697502*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"State", "[", "True", "]"}], "=", "oneSt"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"State", "[", "False", "]"}], "=", "zeroSt"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"XBit", "[", "X", "]"}], "=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"XBit", "[", "Y", "]"}], "=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"XBit", "[", "Z", "]"}], "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"XBit", "[", "Id", "]"}], "=", "False"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ZBit", "[", "X", "]"}], "=", "False"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ZBit", "[", "Y", "]"}], "=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ZBit", "[", "Z", "]"}], "=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ZBit", "[", "Id", "]"}], "=", "False"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Ycount", "[", "X", "]"}], "=", "0"}], ";", 
  RowBox[{
   RowBox[{"Ycount", "[", "Y", "]"}], "=", "1"}], ";", 
  RowBox[{
   RowBox[{"Ycount", "[", "Z", "]"}], "=", "0"}], ";", 
  RowBox[{
   RowBox[{"Ycount", "[", "Id", "]"}], "=", "0"}], ";"}]}], "Input",
 CellChangeTimes->{{3.718646175503356*^9, 3.7186462656794095`*^9}, {
  3.7186463504314127`*^9, 3.718646405243431*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"FormulaCheck", "[", 
    RowBox[{"{", " ", 
     RowBox[{"pauli_", ",", " ", "stateBit_"}], "}"}], "]"}], ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"pauli", ".", 
     RowBox[{"State", "[", "stateBit", "]"}]}], "\[Equal]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"I", "^", 
      RowBox[{"Ycount", "[", "pauli", "]"}]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "^", 
      RowBox[{"Boole", "[", " ", 
       RowBox[{"And", "[", 
        RowBox[{"stateBit", ",", " ", 
         RowBox[{"ZBit", "[", "pauli", "]"}]}], "]"}], " ", "]"}]}], " ", 
     RowBox[{"State", "[", " ", 
      RowBox[{"Xor", "[", 
       RowBox[{"stateBit", " ", ",", 
        RowBox[{"XBit", "[", "pauli", "]"}]}], "]"}], "]"}]}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7186462761153984`*^9, 3.7186463430594215`*^9}, {
  3.718646416155429*^9, 3.718646552232479*^9}, {3.7186465964045043`*^9, 
  3.718646634713516*^9}, {3.7186467638007994`*^9, 3.718646769583794*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FormulaCheck", "/@", 
   RowBox[{"Tuples", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Id", ",", "X", ",", "Y", ",", "Z"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}]}], "//", 
  RowBox[{
   RowBox[{"And", "@@", "#"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.7186466565775075`*^9, 3.7186467799667997`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.718646693228776*^9, 3.718646703477778*^9}, {
   3.7186467381937866`*^9, 3.7186467806398077`*^9}, 3.7187175759767003`*^9, 
   3.718718432580945*^9, 3.718720392855904*^9, 3.718720697142393*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Matrices.qb", "Chapter",
 CellChangeTimes->{
  3.7184788834158244`*^9, 3.7186466473395104`*^9, {3.7187204172956123`*^9, 
   3.718720418865557*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PauliExpPiece", "[", "paulies__", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"MatrixExp", "[", 
        RowBox[{"I", " ", "t", " ", 
         RowBox[{"tp", "[", "paulies", "]"}]}], "]"}], "/.", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Exp", "[", 
           RowBox[{"I", " ", "t"}], "]"}], "\[Rule]", "\"\< Ep\>\""}], ",", 
         RowBox[{
          RowBox[{"Exp", "[", 
           RowBox[{
            RowBox[{"-", "I"}], " ", "t"}], "]"}], "\[Rule]", "\"\< Em\>\""}],
          ",", 
         RowBox[{
          RowBox[{"I", " ", 
           RowBox[{"Sin", "[", "t", "]"}]}], "\[Rule]", "  ", "\"\< IS\>\""}],
          ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "I"}], " ", 
           RowBox[{"Sin", "[", "t", "]"}]}], "\[Rule]", "  ", "\"\<mIS\>\""}],
          ",", 
         RowBox[{
          RowBox[{"Cos", "[", "t", "]"}], "\[Rule]", "\"\<  C\>\""}], " ", 
         ",", 
         RowBox[{
          RowBox[{"Sin", "[", "t", "]"}], "\[Rule]", "\"\< pS\>\""}], ",", 
         RowBox[{
          RowBox[{"-", 
           RowBox[{"Sin", "[", "t", "]"}]}], "\[Rule]", "\"\< mS\>\""}]}], 
        "}"}]}], "//", 
      RowBox[{
       RowBox[{"AsQArr", "[", 
        RowBox[{"#", ",", "0"}], "]"}], "&"}]}], "//", 
     RowBox[{
      RowBox[{"StringReplace", "[", 
       RowBox[{"#", ",", 
        RowBox[{"\"\<[     [\>\"", "\[Rule]", "\"\<    [[\>\""}]}], "]"}], 
      "&"}]}], "//", 
    RowBox[{
     RowBox[{"#", "~~", "\"\<;\\n\>\""}], "&"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7187175797173595`*^9, 3.7187176146904716`*^9}, {
   3.7187176953540573`*^9, 3.7187177203616886`*^9}, {3.7187177626100025`*^9, 
   3.7187179305017643`*^9}, {3.7187180027673273`*^9, 
   3.7187180030132246`*^9}, {3.7187180457732887`*^9, 
   3.7187181492506723`*^9}, {3.7187183149004974`*^9, 3.7187183193089037`*^9}, 
   3.7187183573407354`*^9, {3.718718509074959*^9, 3.7187185614713545`*^9}, {
   3.7187187394897165`*^9, 3.7187187413639545`*^9}, {3.718718842163275*^9, 
   3.718718843930902*^9}, {3.718718957950756*^9, 3.7187189622513447`*^9}, {
   3.7187201074064493`*^9, 3.718720145185424*^9}, {3.7187203726301537`*^9, 
   3.7187203802452*^9}, {3.7187204309115763`*^9, 3.71872045656062*^9}, {
   3.7187206381508117`*^9, 3.718720638510955*^9}, {3.7187206925751505`*^9, 
   3.7187206931353016`*^9}, {3.7187210087938433`*^9, 3.7187210392313623`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"StringOfPauli", "[", "X", "]"}], "=", "\"\<X\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringOfPauli", "[", "Y", "]"}], "=", "\"\<Y\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringOfPauli", "[", "Z", "]"}], "=", "\"\<Z\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StringOfPauli", "[", "Id", "]"}], "=", "\"\<I\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PauliStringPiece", "[", "paulies__", "]"}], ":=", 
   RowBox[{
    RowBox[{"StringOfPauli", "/@", " ", 
     RowBox[{"List", "[", "paulies", "]"}]}], "//", "StringJoin"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.718720298600816*^9, 3.7187203366639442`*^9}, {
  3.7187204829800806`*^9, 3.7187205222502007`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PauliExpPiece", "[", 
  RowBox[{"X", ",", "X", ",", "Z"}], "]"}]], "Input",
 CellChangeTimes->{{3.7187204648372355`*^9, 3.7187204732011013`*^9}}],

Cell[BoxData["\<\"    [[  C;  O;  O;  O;  O;  O; IS;  O];\\n     [  O;  C;  \
O;  O;  O;  O;  O;mIS];\\n     [  O;  O;  C;  O; IS;  O;  O;  O];\\n     [  \
O;  O;  O;  C;  O;mIS;  O;  O];\\n     [  O;  O; IS;  O;  C;  O;  O;  O];\\n  \
   [  O;  O;  O;mIS;  O;  C;  O;  O];\\n     [ IS;  O;  O;  O;  O;  O;  C;  \
O];\\n     [  O;mIS;  O;  O;  O;  O;  O;  C]];\\n\"\>"], "Output",
 CellChangeTimes->{{3.718720468745313*^9, 3.718720473543486*^9}, 
   3.71872069721196*^9, 3.7187210419218025`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PauliStringPiece", "[", 
  RowBox[{"X", ",", "X", ",", "Z"}], "]"}]], "Input",
 CellChangeTimes->{{3.7187205263700495`*^9, 3.718720533483435*^9}}],

Cell[BoxData["\<\"XXZ\"\>"], "Output",
 CellChangeTimes->{{3.7187205284171534`*^9, 3.718720534220138*^9}, 
   3.7187206972275934`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"PauliCode", "[", 
   RowBox[{"{", "paulies__", "}"}], "]"}], ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"\"\<function Exp\>\"", "~~", 
   RowBox[{"PauliStringPiece", "[", "paulies", "]"}], "~~", 
   "\"\<Matrix( t: Double ) : Complex[][] {\n    let O = ZeroC();\n    let C \
= Complex(Cos(t),0.0);\n    let IS = Complex(0.0,Sin(t));\n    let mIS = \
Complex(0.0,-Sin(t));\n    let pS = Complex(Sin(t),0.0);\n    let mS = \
Complex(-Sin(t),0.0);\n    let Ep = ExpIC(t);\n    let Em = ExpIC(-t);\n    \
let matrix = \\n\>\"", "~~", 
   RowBox[{"PauliExpPiece", "[", "paulies", "]"}], "~~", "   ", "\n", "  ", 
   "\"\<    return matrix;\n}\\n\\n\>\""}]}]], "Input",
 CellChangeTimes->{{3.718720547880199*^9, 3.718720731594817*^9}, {
   3.7187208838835783`*^9, 3.7187208860611715`*^9}, 3.7187209979137883`*^9, {
   3.7187210702636576`*^9, 3.718721086937796*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"PauliCode", "/@", 
      RowBox[{"Tuples", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Id", ",", "X", ",", "Y", ",", "Z"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Id", ",", "X", ",", "Y", ",", "Z"}], "}"}]}], "}"}], 
       "]"}]}], "//", "StringJoin"}], ")"}], "~~", "\[IndentingNewLine]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"PauliCode", "/@", 
      RowBox[{"Tuples", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Id", ",", "X", ",", "Y", ",", "Z"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Id", ",", "X", ",", "Y", ",", "Z"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Id", ",", "X", ",", "Y", ",", "Z"}], "}"}]}], "}"}], 
       "]"}]}], "//", "StringJoin"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.718720839316888*^9, 3.71872086218427*^9}, 
   3.7187208973565545`*^9, {3.7187210496532717`*^9, 3.718721053305811*^9}, {
   3.7187212427277174`*^9, 3.7187212559646535`*^9}, {3.718721333366556*^9, 
   3.718721361491644*^9}, {3.718727871584074*^9, 3.718727883288909*^9}, {
   3.718728040638919*^9, 3.7187281144712653`*^9}}],

Cell[BoxData["\<\"function ExpIIMatrix( t: Double ) : Complex[][] {\\n    let \
O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    let IS = \
Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let pS = \
Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[ Ep;  O;  O;  \
O];\\n     [  O; Ep;  O;  O];\\n     [  O;  O; Ep;  O];\\n     [  O;  O;  O; \
Ep]];\\n    return matrix;\\n}\\n\\nfunction ExpIXMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C; IS;  O;  \
O];\\n     [ IS;  C;  O;  O];\\n     [  O;  O;  C; IS];\\n     [  O;  O; IS;  \
C]];\\n    return matrix;\\n}\\n\\nfunction ExpIYMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C; pS;  O;  \
O];\\n     [ mS;  C;  O;  O];\\n     [  O;  O;  C; pS];\\n     [  O;  O; mS;  \
C]];\\n    return matrix;\\n}\\n\\nfunction ExpIZMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[ Ep;  O;  O;  \
O];\\n     [  O; Em;  O;  O];\\n     [  O;  O; Ep;  O];\\n     [  O;  O;  O; \
Em]];\\n    return matrix;\\n}\\n\\nfunction ExpXIMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; IS;  \
O];\\n     [  O;  C;  O; IS];\\n     [ IS;  O;  C;  O];\\n     [  O; IS;  O;  \
C]];\\n    return matrix;\\n}\\n\\nfunction ExpXXMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O;  O; \
IS];\\n     [  O;  C; IS;  O];\\n     [  O; IS;  C;  O];\\n     [ IS;  O;  O; \
 C]];\\n    return matrix;\\n}\\n\\nfunction ExpXYMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O;  O; \
pS];\\n     [  O;  C; mS;  O];\\n     [  O; pS;  C;  O];\\n     [ mS;  O;  O; \
 C]];\\n    return matrix;\\n}\\n\\nfunction ExpXZMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; IS;  \
O];\\n     [  O;  C;  O;mIS];\\n     [ IS;  O;  C;  O];\\n     [  O;mIS;  O;  \
C]];\\n    return matrix;\\n}\\n\\nfunction ExpYIMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; pS;  \
O];\\n     [  O;  C;  O; pS];\\n     [ mS;  O;  C;  O];\\n     [  O; mS;  O;  \
C]];\\n    return matrix;\\n}\\n\\nfunction ExpYXMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O;  O; \
pS];\\n     [  O;  C; pS;  O];\\n     [  O; mS;  C;  O];\\n     [ mS;  O;  O; \
 C]];\\n    return matrix;\\n}\\n\\nfunction ExpYYMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O;  \
O;mIS];\\n     [  O;  C; IS;  O];\\n     [  O; IS;  C;  O];\\n     [mIS;  O;  \
O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYZMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; pS;  \
O];\\n     [  O;  C;  O; mS];\\n     [ mS;  O;  C;  O];\\n     [  O; pS;  O;  \
C]];\\n    return matrix;\\n}\\n\\nfunction ExpZIMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[ Ep;  O;  O;  \
O];\\n     [  O; Ep;  O;  O];\\n     [  O;  O; Em;  O];\\n     [  O;  O;  O; \
Em]];\\n    return matrix;\\n}\\n\\nfunction ExpZXMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C; IS;  O;  \
O];\\n     [ IS;  C;  O;  O];\\n     [  O;  O;  C;mIS];\\n     [  O;  O;mIS;  \
C]];\\n    return matrix;\\n}\\n\\nfunction ExpZYMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C; pS;  O;  \
O];\\n     [ mS;  C;  O;  O];\\n     [  O;  O;  C; mS];\\n     [  O;  O; pS;  \
C]];\\n    return matrix;\\n}\\n\\nfunction ExpZZMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[ Ep;  O;  O;  \
O];\\n     [  O; Em;  O;  O];\\n     [  O;  O; Em;  O];\\n     [  O;  O;  O; \
Ep]];\\n    return matrix;\\n}\\n\\nfunction ExpIIIMatrix( t: Double ) : \
Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    \
let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let \
pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[ Ep;  O;  O;  \
O;  O;  O;  O;  O];\\n     [  O; Ep;  O;  O;  O;  O;  O;  O];\\n     [  O;  \
O; Ep;  O;  O;  O;  O;  O];\\n     [  O;  O;  O; Ep;  O;  O;  O;  O];\\n     \
[  O;  O;  O;  O; Ep;  O;  O;  O];\\n     [  O;  O;  O;  O;  O; Ep;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O; Ep;  O];\\n     [  O;  O;  O;  O;  O;  \
O;  O; Ep]];\\n    return matrix;\\n}\\n\\nfunction ExpIIXMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C; IS; \
 O;  O;  O;  O;  O;  O];\\n     [ IS;  C;  O;  O;  O;  O;  O;  O];\\n     [  \
O;  O;  C; IS;  O;  O;  O;  O];\\n     [  O;  O; IS;  C;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O;  C; IS;  O;  O];\\n     [  O;  O;  O;  O; IS;  C;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O;  C; IS];\\n     [  O;  O;  O;  O;  O;  \
O; IS;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpIIYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C; pS; \
 O;  O;  O;  O;  O;  O];\\n     [ mS;  C;  O;  O;  O;  O;  O;  O];\\n     [  \
O;  O;  C; pS;  O;  O;  O;  O];\\n     [  O;  O; mS;  C;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O;  C; pS;  O;  O];\\n     [  O;  O;  O;  O; mS;  C;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O;  C; pS];\\n     [  O;  O;  O;  O;  O;  \
O; mS;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpIIZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[ Ep;  O; \
 O;  O;  O;  O;  O;  O];\\n     [  O; Em;  O;  O;  O;  O;  O;  O];\\n     [  \
O;  O; Ep;  O;  O;  O;  O;  O];\\n     [  O;  O;  O; Em;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O; Ep;  O;  O;  O];\\n     [  O;  O;  O;  O;  O; Em;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O; Ep;  O];\\n     [  O;  O;  O;  O;  O;  \
O;  O; Em]];\\n    return matrix;\\n}\\n\\nfunction ExpIXIMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
IS;  O;  O;  O;  O;  O];\\n     [  O;  C;  O; IS;  O;  O;  O;  O];\\n     [ \
IS;  O;  C;  O;  O;  O;  O;  O];\\n     [  O; IS;  O;  C;  O;  O;  O;  O];\\n \
    [  O;  O;  O;  O;  C;  O; IS;  O];\\n     [  O;  O;  O;  O;  O;  C;  O; \
IS];\\n     [  O;  O;  O;  O; IS;  O;  C;  O];\\n     [  O;  O;  O;  O;  O; \
IS;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpIXXMatrix( t: Double \
) : Complex[][] {\\n    let O = ZeroC();\\n    let C = \
Complex(Cos(t),0.0);\\n    let IS = Complex(0.0,Sin(t));\\n    let mIS = \
Complex(0.0,-Sin(t));\\n    let pS = Complex(Sin(t),0.0);\\n    let mS = \
Complex(-Sin(t),0.0);\\n    let Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n   \
 let matrix = \\n    [[  C;  O;  O; IS;  O;  O;  O;  O];\\n     [  O;  C; IS; \
 O;  O;  O;  O;  O];\\n     [  O; IS;  C;  O;  O;  O;  O;  O];\\n     [ IS;  \
O;  O;  C;  O;  O;  O;  O];\\n     [  O;  O;  O;  O;  C;  O;  O; IS];\\n     \
[  O;  O;  O;  O;  O;  C; IS;  O];\\n     [  O;  O;  O;  O;  O; IS;  C;  \
O];\\n     [  O;  O;  O;  O; IS;  O;  O;  C]];\\n    return \
matrix;\\n}\\n\\nfunction ExpIXYMatrix( t: Double ) : Complex[][] {\\n    let \
O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    let IS = \
Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let pS = \
Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O;  O; \
pS;  O;  O;  O;  O];\\n     [  O;  C; mS;  O;  O;  O;  O;  O];\\n     [  O; \
pS;  C;  O;  O;  O;  O;  O];\\n     [ mS;  O;  O;  C;  O;  O;  O;  O];\\n     \
[  O;  O;  O;  O;  C;  O;  O; pS];\\n     [  O;  O;  O;  O;  O;  C; mS;  \
O];\\n     [  O;  O;  O;  O;  O; pS;  C;  O];\\n     [  O;  O;  O;  O; mS;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpIXZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
IS;  O;  O;  O;  O;  O];\\n     [  O;  C;  O;mIS;  O;  O;  O;  O];\\n     [ \
IS;  O;  C;  O;  O;  O;  O;  O];\\n     [  O;mIS;  O;  C;  O;  O;  O;  O];\\n \
    [  O;  O;  O;  O;  C;  O; IS;  O];\\n     [  O;  O;  O;  O;  O;  C;  \
O;mIS];\\n     [  O;  O;  O;  O; IS;  O;  C;  O];\\n     [  O;  O;  O;  O;  \
O;mIS;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpIYIMatrix( t: \
Double ) : Complex[][] {\\n    let O = ZeroC();\\n    let C = \
Complex(Cos(t),0.0);\\n    let IS = Complex(0.0,Sin(t));\\n    let mIS = \
Complex(0.0,-Sin(t));\\n    let pS = Complex(Sin(t),0.0);\\n    let mS = \
Complex(-Sin(t),0.0);\\n    let Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n   \
 let matrix = \\n    [[  C;  O; pS;  O;  O;  O;  O;  O];\\n     [  O;  C;  O; \
pS;  O;  O;  O;  O];\\n     [ mS;  O;  C;  O;  O;  O;  O;  O];\\n     [  O; \
mS;  O;  C;  O;  O;  O;  O];\\n     [  O;  O;  O;  O;  C;  O; pS;  O];\\n     \
[  O;  O;  O;  O;  O;  C;  O; pS];\\n     [  O;  O;  O;  O; mS;  O;  C;  \
O];\\n     [  O;  O;  O;  O;  O; mS;  O;  C]];\\n    return \
matrix;\\n}\\n\\nfunction ExpIYXMatrix( t: Double ) : Complex[][] {\\n    let \
O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    let IS = \
Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let pS = \
Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O;  O; \
pS;  O;  O;  O;  O];\\n     [  O;  C; pS;  O;  O;  O;  O;  O];\\n     [  O; \
mS;  C;  O;  O;  O;  O;  O];\\n     [ mS;  O;  O;  C;  O;  O;  O;  O];\\n     \
[  O;  O;  O;  O;  C;  O;  O; pS];\\n     [  O;  O;  O;  O;  O;  C; pS;  \
O];\\n     [  O;  O;  O;  O;  O; mS;  C;  O];\\n     [  O;  O;  O;  O; mS;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpIYYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;mIS;  O;  O;  O;  O];\\n     [  O;  C; IS;  O;  O;  O;  O;  O];\\n     [  \
O; IS;  C;  O;  O;  O;  O;  O];\\n     [mIS;  O;  O;  C;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O;  C;  O;  O;mIS];\\n     [  O;  O;  O;  O;  O;  C; IS;  \
O];\\n     [  O;  O;  O;  O;  O; IS;  C;  O];\\n     [  O;  O;  O;  O;mIS;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpIYZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
pS;  O;  O;  O;  O;  O];\\n     [  O;  C;  O; mS;  O;  O;  O;  O];\\n     [ \
mS;  O;  C;  O;  O;  O;  O;  O];\\n     [  O; pS;  O;  C;  O;  O;  O;  O];\\n \
    [  O;  O;  O;  O;  C;  O; pS;  O];\\n     [  O;  O;  O;  O;  O;  C;  O; \
mS];\\n     [  O;  O;  O;  O; mS;  O;  C;  O];\\n     [  O;  O;  O;  O;  O; \
pS;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpIZIMatrix( t: Double \
) : Complex[][] {\\n    let O = ZeroC();\\n    let C = \
Complex(Cos(t),0.0);\\n    let IS = Complex(0.0,Sin(t));\\n    let mIS = \
Complex(0.0,-Sin(t));\\n    let pS = Complex(Sin(t),0.0);\\n    let mS = \
Complex(-Sin(t),0.0);\\n    let Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n   \
 let matrix = \\n    [[ Ep;  O;  O;  O;  O;  O;  O;  O];\\n     [  O; Ep;  O; \
 O;  O;  O;  O;  O];\\n     [  O;  O; Em;  O;  O;  O;  O;  O];\\n     [  O;  \
O;  O; Em;  O;  O;  O;  O];\\n     [  O;  O;  O;  O; Ep;  O;  O;  O];\\n     \
[  O;  O;  O;  O;  O; Ep;  O;  O];\\n     [  O;  O;  O;  O;  O;  O; Em;  \
O];\\n     [  O;  O;  O;  O;  O;  O;  O; Em]];\\n    return \
matrix;\\n}\\n\\nfunction ExpIZXMatrix( t: Double ) : Complex[][] {\\n    let \
O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    let IS = \
Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let pS = \
Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C; IS;  O;  \
O;  O;  O;  O;  O];\\n     [ IS;  C;  O;  O;  O;  O;  O;  O];\\n     [  O;  \
O;  C;mIS;  O;  O;  O;  O];\\n     [  O;  O;mIS;  C;  O;  O;  O;  O];\\n     \
[  O;  O;  O;  O;  C; IS;  O;  O];\\n     [  O;  O;  O;  O; IS;  C;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O;  C;mIS];\\n     [  O;  O;  O;  O;  O;  \
O;mIS;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpIZYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C; pS; \
 O;  O;  O;  O;  O;  O];\\n     [ mS;  C;  O;  O;  O;  O;  O;  O];\\n     [  \
O;  O;  C; mS;  O;  O;  O;  O];\\n     [  O;  O; pS;  C;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O;  C; pS;  O;  O];\\n     [  O;  O;  O;  O; mS;  C;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O;  C; mS];\\n     [  O;  O;  O;  O;  O;  \
O; pS;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpIZZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[ Ep;  O; \
 O;  O;  O;  O;  O;  O];\\n     [  O; Em;  O;  O;  O;  O;  O;  O];\\n     [  \
O;  O; Em;  O;  O;  O;  O;  O];\\n     [  O;  O;  O; Ep;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O; Ep;  O;  O;  O];\\n     [  O;  O;  O;  O;  O; Em;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O; Em;  O];\\n     [  O;  O;  O;  O;  O;  \
O;  O; Ep]];\\n    return matrix;\\n}\\n\\nfunction ExpXIIMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O; IS;  O;  O;  O];\\n     [  O;  C;  O;  O;  O; IS;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O; IS;  O];\\n     [  O;  O;  O;  C;  O;  O;  O; IS];\\n  \
   [ IS;  O;  O;  O;  C;  O;  O;  O];\\n     [  O; IS;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O; IS;  O;  O;  O;  C;  O];\\n     [  O;  O;  O; IS;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXIXMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O; IS;  O;  O];\\n     [  O;  C;  O;  O; IS;  O;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O;  O; IS];\\n     [  O;  O;  O;  C;  O;  O; IS;  O];\\n  \
   [  O; IS;  O;  O;  C;  O;  O;  O];\\n     [ IS;  O;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O;  O; IS;  O;  O;  C;  O];\\n     [  O;  O; IS;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXIYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O; pS;  O;  O];\\n     [  O;  C;  O;  O; mS;  O;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O;  O; pS];\\n     [  O;  O;  O;  C;  O;  O; mS;  O];\\n  \
   [  O; pS;  O;  O;  C;  O;  O;  O];\\n     [ mS;  O;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O;  O; pS;  O;  O;  C;  O];\\n     [  O;  O; mS;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXIZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O; IS;  O;  O;  O];\\n     [  O;  C;  O;  O;  O;mIS;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O; IS;  O];\\n     [  O;  O;  O;  C;  O;  O;  O;mIS];\\n  \
   [ IS;  O;  O;  O;  C;  O;  O;  O];\\n     [  O;mIS;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O; IS;  O;  O;  O;  C;  O];\\n     [  O;  O;  O;mIS;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXXIMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O; IS;  O];\\n     [  O;  C;  O;  O;  O;  O;  O; IS];\\n     [  \
O;  O;  C;  O; IS;  O;  O;  O];\\n     [  O;  O;  O;  C;  O; IS;  O;  O];\\n  \
   [  O;  O; IS;  O;  C;  O;  O;  O];\\n     [  O;  O;  O; IS;  O;  C;  O;  \
O];\\n     [ IS;  O;  O;  O;  O;  O;  C;  O];\\n     [  O; IS;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXXXMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O;  O; IS];\\n     [  O;  C;  O;  O;  O;  O; IS;  O];\\n     [  \
O;  O;  C;  O;  O; IS;  O;  O];\\n     [  O;  O;  O;  C; IS;  O;  O;  O];\\n  \
   [  O;  O;  O; IS;  C;  O;  O;  O];\\n     [  O;  O; IS;  O;  O;  C;  O;  \
O];\\n     [  O; IS;  O;  O;  O;  O;  C;  O];\\n     [ IS;  O;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXXYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O;  O; pS];\\n     [  O;  C;  O;  O;  O;  O; mS;  O];\\n     [  \
O;  O;  C;  O;  O; pS;  O;  O];\\n     [  O;  O;  O;  C; mS;  O;  O;  O];\\n  \
   [  O;  O;  O; pS;  C;  O;  O;  O];\\n     [  O;  O; mS;  O;  O;  C;  O;  \
O];\\n     [  O; pS;  O;  O;  O;  O;  C;  O];\\n     [ mS;  O;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXXZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O; IS;  O];\\n     [  O;  C;  O;  O;  O;  O;  O;mIS];\\n     [  \
O;  O;  C;  O; IS;  O;  O;  O];\\n     [  O;  O;  O;  C;  O;mIS;  O;  O];\\n  \
   [  O;  O; IS;  O;  C;  O;  O;  O];\\n     [  O;  O;  O;mIS;  O;  C;  O;  \
O];\\n     [ IS;  O;  O;  O;  O;  O;  C;  O];\\n     [  O;mIS;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXYIMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O; pS;  O];\\n     [  O;  C;  O;  O;  O;  O;  O; pS];\\n     [  \
O;  O;  C;  O; mS;  O;  O;  O];\\n     [  O;  O;  O;  C;  O; mS;  O;  O];\\n  \
   [  O;  O; pS;  O;  C;  O;  O;  O];\\n     [  O;  O;  O; pS;  O;  C;  O;  \
O];\\n     [ mS;  O;  O;  O;  O;  O;  C;  O];\\n     [  O; mS;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXYXMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O;  O; pS];\\n     [  O;  C;  O;  O;  O;  O; pS;  O];\\n     [  \
O;  O;  C;  O;  O; mS;  O;  O];\\n     [  O;  O;  O;  C; mS;  O;  O;  O];\\n  \
   [  O;  O;  O; pS;  C;  O;  O;  O];\\n     [  O;  O; pS;  O;  O;  C;  O;  \
O];\\n     [  O; mS;  O;  O;  O;  O;  C;  O];\\n     [ mS;  O;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXYYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O;  O;mIS];\\n     [  O;  C;  O;  O;  O;  O; IS;  O];\\n     [  \
O;  O;  C;  O;  O; IS;  O;  O];\\n     [  O;  O;  O;  C;mIS;  O;  O;  O];\\n  \
   [  O;  O;  O;mIS;  C;  O;  O;  O];\\n     [  O;  O; IS;  O;  O;  C;  O;  \
O];\\n     [  O; IS;  O;  O;  O;  O;  C;  O];\\n     [mIS;  O;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXYZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O; pS;  O];\\n     [  O;  C;  O;  O;  O;  O;  O; mS];\\n     [  \
O;  O;  C;  O; mS;  O;  O;  O];\\n     [  O;  O;  O;  C;  O; pS;  O;  O];\\n  \
   [  O;  O; pS;  O;  C;  O;  O;  O];\\n     [  O;  O;  O; mS;  O;  C;  O;  \
O];\\n     [ mS;  O;  O;  O;  O;  O;  C;  O];\\n     [  O; pS;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXZIMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O; IS;  O;  O;  O];\\n     [  O;  C;  O;  O;  O; IS;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O;mIS;  O];\\n     [  O;  O;  O;  C;  O;  O;  O;mIS];\\n  \
   [ IS;  O;  O;  O;  C;  O;  O;  O];\\n     [  O; IS;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O;mIS;  O;  O;  O;  C;  O];\\n     [  O;  O;  O;mIS;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXZXMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O; IS;  O;  O];\\n     [  O;  C;  O;  O; IS;  O;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O;  O;mIS];\\n     [  O;  O;  O;  C;  O;  O;mIS;  O];\\n  \
   [  O; IS;  O;  O;  C;  O;  O;  O];\\n     [ IS;  O;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O;  O;mIS;  O;  O;  C;  O];\\n     [  O;  O;mIS;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXZYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O; pS;  O;  O];\\n     [  O;  C;  O;  O; mS;  O;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O;  O; mS];\\n     [  O;  O;  O;  C;  O;  O; pS;  O];\\n  \
   [  O; pS;  O;  O;  C;  O;  O;  O];\\n     [ mS;  O;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O;  O; mS;  O;  O;  C;  O];\\n     [  O;  O; pS;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpXZZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O; IS;  O;  O;  O];\\n     [  O;  C;  O;  O;  O;mIS;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O;mIS;  O];\\n     [  O;  O;  O;  C;  O;  O;  O; IS];\\n  \
   [ IS;  O;  O;  O;  C;  O;  O;  O];\\n     [  O;mIS;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O;mIS;  O;  O;  O;  C;  O];\\n     [  O;  O;  O; IS;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYIIMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O; pS;  O;  O;  O];\\n     [  O;  C;  O;  O;  O; pS;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O; pS;  O];\\n     [  O;  O;  O;  C;  O;  O;  O; pS];\\n  \
   [ mS;  O;  O;  O;  C;  O;  O;  O];\\n     [  O; mS;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O; mS;  O;  O;  O;  C;  O];\\n     [  O;  O;  O; mS;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYIXMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O; pS;  O;  O];\\n     [  O;  C;  O;  O; pS;  O;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O;  O; pS];\\n     [  O;  O;  O;  C;  O;  O; pS;  O];\\n  \
   [  O; mS;  O;  O;  C;  O;  O;  O];\\n     [ mS;  O;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O;  O; mS;  O;  O;  C;  O];\\n     [  O;  O; mS;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYIYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;mIS;  O;  O];\\n     [  O;  C;  O;  O; IS;  O;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O;  O;mIS];\\n     [  O;  O;  O;  C;  O;  O; IS;  O];\\n  \
   [  O; IS;  O;  O;  C;  O;  O;  O];\\n     [mIS;  O;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O;  O; IS;  O;  O;  C;  O];\\n     [  O;  O;mIS;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYIZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O; pS;  O;  O;  O];\\n     [  O;  C;  O;  O;  O; mS;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O; pS;  O];\\n     [  O;  O;  O;  C;  O;  O;  O; mS];\\n  \
   [ mS;  O;  O;  O;  C;  O;  O;  O];\\n     [  O; pS;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O; mS;  O;  O;  O;  C;  O];\\n     [  O;  O;  O; pS;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYXIMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O; pS;  O];\\n     [  O;  C;  O;  O;  O;  O;  O; pS];\\n     [  \
O;  O;  C;  O; pS;  O;  O;  O];\\n     [  O;  O;  O;  C;  O; pS;  O;  O];\\n  \
   [  O;  O; mS;  O;  C;  O;  O;  O];\\n     [  O;  O;  O; mS;  O;  C;  O;  \
O];\\n     [ mS;  O;  O;  O;  O;  O;  C;  O];\\n     [  O; mS;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYXXMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O;  O; pS];\\n     [  O;  C;  O;  O;  O;  O; pS;  O];\\n     [  \
O;  O;  C;  O;  O; pS;  O;  O];\\n     [  O;  O;  O;  C; pS;  O;  O;  O];\\n  \
   [  O;  O;  O; mS;  C;  O;  O;  O];\\n     [  O;  O; mS;  O;  O;  C;  O;  \
O];\\n     [  O; mS;  O;  O;  O;  O;  C;  O];\\n     [ mS;  O;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYXYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O;  O;mIS];\\n     [  O;  C;  O;  O;  O;  O; IS;  O];\\n     [  \
O;  O;  C;  O;  O;mIS;  O;  O];\\n     [  O;  O;  O;  C; IS;  O;  O;  O];\\n  \
   [  O;  O;  O; IS;  C;  O;  O;  O];\\n     [  O;  O;mIS;  O;  O;  C;  O;  \
O];\\n     [  O; IS;  O;  O;  O;  O;  C;  O];\\n     [mIS;  O;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYXZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O; pS;  O];\\n     [  O;  C;  O;  O;  O;  O;  O; mS];\\n     [  \
O;  O;  C;  O; pS;  O;  O;  O];\\n     [  O;  O;  O;  C;  O; mS;  O;  O];\\n  \
   [  O;  O; mS;  O;  C;  O;  O;  O];\\n     [  O;  O;  O; pS;  O;  C;  O;  \
O];\\n     [ mS;  O;  O;  O;  O;  O;  C;  O];\\n     [  O; pS;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYYIMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O;mIS;  O];\\n     [  O;  C;  O;  O;  O;  O;  O;mIS];\\n     [  \
O;  O;  C;  O; IS;  O;  O;  O];\\n     [  O;  O;  O;  C;  O; IS;  O;  O];\\n  \
   [  O;  O; IS;  O;  C;  O;  O;  O];\\n     [  O;  O;  O; IS;  O;  C;  O;  \
O];\\n     [mIS;  O;  O;  O;  O;  O;  C;  O];\\n     [  O;mIS;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYYXMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O;  O;mIS];\\n     [  O;  C;  O;  O;  O;  O;mIS;  O];\\n     [  \
O;  O;  C;  O;  O; IS;  O;  O];\\n     [  O;  O;  O;  C; IS;  O;  O;  O];\\n  \
   [  O;  O;  O; IS;  C;  O;  O;  O];\\n     [  O;  O; IS;  O;  O;  C;  O;  \
O];\\n     [  O;mIS;  O;  O;  O;  O;  C;  O];\\n     [mIS;  O;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYYYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O;  O; mS];\\n     [  O;  C;  O;  O;  O;  O; pS;  O];\\n     [  \
O;  O;  C;  O;  O; pS;  O;  O];\\n     [  O;  O;  O;  C; mS;  O;  O;  O];\\n  \
   [  O;  O;  O; pS;  C;  O;  O;  O];\\n     [  O;  O; mS;  O;  O;  C;  O;  \
O];\\n     [  O; mS;  O;  O;  O;  O;  C;  O];\\n     [ pS;  O;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYYZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;  O;mIS;  O];\\n     [  O;  C;  O;  O;  O;  O;  O; IS];\\n     [  \
O;  O;  C;  O; IS;  O;  O;  O];\\n     [  O;  O;  O;  C;  O;mIS;  O;  O];\\n  \
   [  O;  O; IS;  O;  C;  O;  O;  O];\\n     [  O;  O;  O;mIS;  O;  C;  O;  \
O];\\n     [mIS;  O;  O;  O;  O;  O;  C;  O];\\n     [  O; IS;  O;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYZIMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O; pS;  O;  O;  O];\\n     [  O;  C;  O;  O;  O; pS;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O; mS;  O];\\n     [  O;  O;  O;  C;  O;  O;  O; mS];\\n  \
   [ mS;  O;  O;  O;  C;  O;  O;  O];\\n     [  O; mS;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O; pS;  O;  O;  O;  C;  O];\\n     [  O;  O;  O; pS;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYZXMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O; pS;  O;  O];\\n     [  O;  C;  O;  O; pS;  O;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O;  O; mS];\\n     [  O;  O;  O;  C;  O;  O; mS;  O];\\n  \
   [  O; mS;  O;  O;  C;  O;  O;  O];\\n     [ mS;  O;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O;  O; pS;  O;  O;  C;  O];\\n     [  O;  O; pS;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYZYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O;  O;mIS;  O;  O];\\n     [  O;  C;  O;  O; IS;  O;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O;  O; IS];\\n     [  O;  O;  O;  C;  O;  O;mIS;  O];\\n  \
   [  O; IS;  O;  O;  C;  O;  O;  O];\\n     [mIS;  O;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O;  O;mIS;  O;  O;  C;  O];\\n     [  O;  O; IS;  O;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpYZZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;  O; pS;  O;  O;  O];\\n     [  O;  C;  O;  O;  O; mS;  O;  O];\\n     [  \
O;  O;  C;  O;  O;  O; mS;  O];\\n     [  O;  O;  O;  C;  O;  O;  O; pS];\\n  \
   [ mS;  O;  O;  O;  C;  O;  O;  O];\\n     [  O; pS;  O;  O;  O;  C;  O;  \
O];\\n     [  O;  O; pS;  O;  O;  O;  C;  O];\\n     [  O;  O;  O; mS;  O;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpZIIMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[ Ep;  O; \
 O;  O;  O;  O;  O;  O];\\n     [  O; Ep;  O;  O;  O;  O;  O;  O];\\n     [  \
O;  O; Ep;  O;  O;  O;  O;  O];\\n     [  O;  O;  O; Ep;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O; Em;  O;  O;  O];\\n     [  O;  O;  O;  O;  O; Em;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O; Em;  O];\\n     [  O;  O;  O;  O;  O;  \
O;  O; Em]];\\n    return matrix;\\n}\\n\\nfunction ExpZIXMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C; IS; \
 O;  O;  O;  O;  O;  O];\\n     [ IS;  C;  O;  O;  O;  O;  O;  O];\\n     [  \
O;  O;  C; IS;  O;  O;  O;  O];\\n     [  O;  O; IS;  C;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O;  C;mIS;  O;  O];\\n     [  O;  O;  O;  O;mIS;  C;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O;  C;mIS];\\n     [  O;  O;  O;  O;  O;  \
O;mIS;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpZIYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C; pS; \
 O;  O;  O;  O;  O;  O];\\n     [ mS;  C;  O;  O;  O;  O;  O;  O];\\n     [  \
O;  O;  C; pS;  O;  O;  O;  O];\\n     [  O;  O; mS;  C;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O;  C; mS;  O;  O];\\n     [  O;  O;  O;  O; pS;  C;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O;  C; mS];\\n     [  O;  O;  O;  O;  O;  \
O; pS;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpZIZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[ Ep;  O; \
 O;  O;  O;  O;  O;  O];\\n     [  O; Em;  O;  O;  O;  O;  O;  O];\\n     [  \
O;  O; Ep;  O;  O;  O;  O;  O];\\n     [  O;  O;  O; Em;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O; Em;  O;  O;  O];\\n     [  O;  O;  O;  O;  O; Ep;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O; Em;  O];\\n     [  O;  O;  O;  O;  O;  \
O;  O; Ep]];\\n    return matrix;\\n}\\n\\nfunction ExpZXIMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
IS;  O;  O;  O;  O;  O];\\n     [  O;  C;  O; IS;  O;  O;  O;  O];\\n     [ \
IS;  O;  C;  O;  O;  O;  O;  O];\\n     [  O; IS;  O;  C;  O;  O;  O;  O];\\n \
    [  O;  O;  O;  O;  C;  O;mIS;  O];\\n     [  O;  O;  O;  O;  O;  C;  \
O;mIS];\\n     [  O;  O;  O;  O;mIS;  O;  C;  O];\\n     [  O;  O;  O;  O;  \
O;mIS;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpZXXMatrix( t: \
Double ) : Complex[][] {\\n    let O = ZeroC();\\n    let C = \
Complex(Cos(t),0.0);\\n    let IS = Complex(0.0,Sin(t));\\n    let mIS = \
Complex(0.0,-Sin(t));\\n    let pS = Complex(Sin(t),0.0);\\n    let mS = \
Complex(-Sin(t),0.0);\\n    let Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n   \
 let matrix = \\n    [[  C;  O;  O; IS;  O;  O;  O;  O];\\n     [  O;  C; IS; \
 O;  O;  O;  O;  O];\\n     [  O; IS;  C;  O;  O;  O;  O;  O];\\n     [ IS;  \
O;  O;  C;  O;  O;  O;  O];\\n     [  O;  O;  O;  O;  C;  O;  O;mIS];\\n     \
[  O;  O;  O;  O;  O;  C;mIS;  O];\\n     [  O;  O;  O;  O;  O;mIS;  C;  \
O];\\n     [  O;  O;  O;  O;mIS;  O;  O;  C]];\\n    return \
matrix;\\n}\\n\\nfunction ExpZXYMatrix( t: Double ) : Complex[][] {\\n    let \
O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    let IS = \
Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let pS = \
Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O;  O; \
pS;  O;  O;  O;  O];\\n     [  O;  C; mS;  O;  O;  O;  O;  O];\\n     [  O; \
pS;  C;  O;  O;  O;  O;  O];\\n     [ mS;  O;  O;  C;  O;  O;  O;  O];\\n     \
[  O;  O;  O;  O;  C;  O;  O; mS];\\n     [  O;  O;  O;  O;  O;  C; pS;  \
O];\\n     [  O;  O;  O;  O;  O; mS;  C;  O];\\n     [  O;  O;  O;  O; pS;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpZXZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
IS;  O;  O;  O;  O;  O];\\n     [  O;  C;  O;mIS;  O;  O;  O;  O];\\n     [ \
IS;  O;  C;  O;  O;  O;  O;  O];\\n     [  O;mIS;  O;  C;  O;  O;  O;  O];\\n \
    [  O;  O;  O;  O;  C;  O;mIS;  O];\\n     [  O;  O;  O;  O;  O;  C;  O; \
IS];\\n     [  O;  O;  O;  O;mIS;  O;  C;  O];\\n     [  O;  O;  O;  O;  O; \
IS;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpZYIMatrix( t: Double \
) : Complex[][] {\\n    let O = ZeroC();\\n    let C = \
Complex(Cos(t),0.0);\\n    let IS = Complex(0.0,Sin(t));\\n    let mIS = \
Complex(0.0,-Sin(t));\\n    let pS = Complex(Sin(t),0.0);\\n    let mS = \
Complex(-Sin(t),0.0);\\n    let Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n   \
 let matrix = \\n    [[  C;  O; pS;  O;  O;  O;  O;  O];\\n     [  O;  C;  O; \
pS;  O;  O;  O;  O];\\n     [ mS;  O;  C;  O;  O;  O;  O;  O];\\n     [  O; \
mS;  O;  C;  O;  O;  O;  O];\\n     [  O;  O;  O;  O;  C;  O; mS;  O];\\n     \
[  O;  O;  O;  O;  O;  C;  O; mS];\\n     [  O;  O;  O;  O; pS;  O;  C;  \
O];\\n     [  O;  O;  O;  O;  O; pS;  O;  C]];\\n    return \
matrix;\\n}\\n\\nfunction ExpZYXMatrix( t: Double ) : Complex[][] {\\n    let \
O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    let IS = \
Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let pS = \
Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O;  O; \
pS;  O;  O;  O;  O];\\n     [  O;  C; pS;  O;  O;  O;  O;  O];\\n     [  O; \
mS;  C;  O;  O;  O;  O;  O];\\n     [ mS;  O;  O;  C;  O;  O;  O;  O];\\n     \
[  O;  O;  O;  O;  C;  O;  O; mS];\\n     [  O;  O;  O;  O;  O;  C; mS;  \
O];\\n     [  O;  O;  O;  O;  O; pS;  C;  O];\\n     [  O;  O;  O;  O; pS;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpZYYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
 O;mIS;  O;  O;  O;  O];\\n     [  O;  C; IS;  O;  O;  O;  O;  O];\\n     [  \
O; IS;  C;  O;  O;  O;  O;  O];\\n     [mIS;  O;  O;  C;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O;  C;  O;  O; IS];\\n     [  O;  O;  O;  O;  O;  C;mIS;  \
O];\\n     [  O;  O;  O;  O;  O;mIS;  C;  O];\\n     [  O;  O;  O;  O; IS;  \
O;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpZYZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C;  O; \
pS;  O;  O;  O;  O;  O];\\n     [  O;  C;  O; mS;  O;  O;  O;  O];\\n     [ \
mS;  O;  C;  O;  O;  O;  O;  O];\\n     [  O; pS;  O;  C;  O;  O;  O;  O];\\n \
    [  O;  O;  O;  O;  C;  O; mS;  O];\\n     [  O;  O;  O;  O;  O;  C;  O; \
pS];\\n     [  O;  O;  O;  O; pS;  O;  C;  O];\\n     [  O;  O;  O;  O;  O; \
mS;  O;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpZZIMatrix( t: Double \
) : Complex[][] {\\n    let O = ZeroC();\\n    let C = \
Complex(Cos(t),0.0);\\n    let IS = Complex(0.0,Sin(t));\\n    let mIS = \
Complex(0.0,-Sin(t));\\n    let pS = Complex(Sin(t),0.0);\\n    let mS = \
Complex(-Sin(t),0.0);\\n    let Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n   \
 let matrix = \\n    [[ Ep;  O;  O;  O;  O;  O;  O;  O];\\n     [  O; Ep;  O; \
 O;  O;  O;  O;  O];\\n     [  O;  O; Em;  O;  O;  O;  O;  O];\\n     [  O;  \
O;  O; Em;  O;  O;  O;  O];\\n     [  O;  O;  O;  O; Em;  O;  O;  O];\\n     \
[  O;  O;  O;  O;  O; Em;  O;  O];\\n     [  O;  O;  O;  O;  O;  O; Ep;  \
O];\\n     [  O;  O;  O;  O;  O;  O;  O; Ep]];\\n    return \
matrix;\\n}\\n\\nfunction ExpZZXMatrix( t: Double ) : Complex[][] {\\n    let \
O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n    let IS = \
Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    let pS = \
Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let Ep = \
ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C; IS;  O;  \
O;  O;  O;  O;  O];\\n     [ IS;  C;  O;  O;  O;  O;  O;  O];\\n     [  O;  \
O;  C;mIS;  O;  O;  O;  O];\\n     [  O;  O;mIS;  C;  O;  O;  O;  O];\\n     \
[  O;  O;  O;  O;  C;mIS;  O;  O];\\n     [  O;  O;  O;  O;mIS;  C;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O;  C; IS];\\n     [  O;  O;  O;  O;  O;  \
O; IS;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpZZYMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[  C; pS; \
 O;  O;  O;  O;  O;  O];\\n     [ mS;  C;  O;  O;  O;  O;  O;  O];\\n     [  \
O;  O;  C; mS;  O;  O;  O;  O];\\n     [  O;  O; pS;  C;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O;  C; mS;  O;  O];\\n     [  O;  O;  O;  O; pS;  C;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O;  C; pS];\\n     [  O;  O;  O;  O;  O;  \
O; mS;  C]];\\n    return matrix;\\n}\\n\\nfunction ExpZZZMatrix( t: Double ) \
: Complex[][] {\\n    let O = ZeroC();\\n    let C = Complex(Cos(t),0.0);\\n  \
  let IS = Complex(0.0,Sin(t));\\n    let mIS = Complex(0.0,-Sin(t));\\n    \
let pS = Complex(Sin(t),0.0);\\n    let mS = Complex(-Sin(t),0.0);\\n    let \
Ep = ExpIC(t);\\n    let Em = ExpIC(-t);\\n    let matrix = \\n    [[ Ep;  O; \
 O;  O;  O;  O;  O;  O];\\n     [  O; Em;  O;  O;  O;  O;  O;  O];\\n     [  \
O;  O; Em;  O;  O;  O;  O;  O];\\n     [  O;  O;  O; Ep;  O;  O;  O;  O];\\n  \
   [  O;  O;  O;  O; Em;  O;  O;  O];\\n     [  O;  O;  O;  O;  O; Ep;  O;  \
O];\\n     [  O;  O;  O;  O;  O;  O; Ep;  O];\\n     [  O;  O;  O;  O;  O;  \
O;  O; Em]];\\n    return matrix;\\n}\\n\\n\"\>"], "Output",
 CellChangeTimes->{{3.7187281118107567`*^9, 3.7187281162899294`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\"\<Exp\>\"", "~~", 
      RowBox[{"StringJoin", "@@", "#"}], "~~", "\"\<Matrix\>\""}], "&"}], 
    ")"}], "/@", 
   RowBox[{"Tuples", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<I\>\"", ",", "\"\<X\>\"", ",", "\"\<Z\>\"", ",", "\"\<Y\>\""}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<I\>\"", ",", "\"\<X\>\"", ",", "\"\<Z\>\"", ",", "\"\<Y\>\""}], 
       "}"}]}], "}"}], "]"}]}], "//", 
  RowBox[{
   RowBox[{"AsQArr", "[", 
    RowBox[{"#", ",", "1"}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.718729478643132*^9, 3.7187295979697523`*^9}}],

Cell[BoxData["\<\"     \
[ExpIIMatrix;ExpIXMatrix;ExpIZMatrix;ExpIYMatrix;ExpXIMatrix;ExpXXMatrix;\
ExpXZMatrix;ExpXYMatrix;ExpZIMatrix;ExpZXMatrix;ExpZZMatrix;ExpZYMatrix;\
ExpYIMatrix;ExpYXMatrix;ExpYZMatrix;ExpYYMatrix]\"\>"], "Output",
 CellChangeTimes->{{3.7187294964524217`*^9, 3.718729502316864*^9}, {
  3.718729546251667*^9, 3.718729598585673*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\"\<Exp\>\"", "~~", 
      RowBox[{"StringJoin", "@@", "#"}], "~~", "\"\<Matrix\>\""}], "&"}], 
    ")"}], "/@", 
   RowBox[{"Tuples", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<I\>\"", ",", "\"\<X\>\"", ",", "\"\<Z\>\"", ",", "\"\<Y\>\""}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<I\>\"", ",", "\"\<X\>\"", ",", "\"\<Z\>\"", ",", "\"\<Y\>\""}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<I\>\"", ",", "\"\<X\>\"", ",", "\"\<Z\>\"", ",", "\"\<Y\>\""}], 
       "}"}]}], "}"}], "]"}]}], "//", 
  RowBox[{
   RowBox[{"AsQArr", "[", 
    RowBox[{"#", ",", "1"}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.718729648233922*^9, 3.7187296517195964`*^9}}],

Cell[BoxData["\<\"     \
[ExpIIIMatrix;ExpIIXMatrix;ExpIIZMatrix;ExpIIYMatrix;ExpIXIMatrix;\
ExpIXXMatrix;ExpIXZMatrix;ExpIXYMatrix;ExpIZIMatrix;ExpIZXMatrix;ExpIZZMatrix;\
ExpIZYMatrix;ExpIYIMatrix;ExpIYXMatrix;ExpIYZMatrix;ExpIYYMatrix;ExpXIIMatrix;\
ExpXIXMatrix;ExpXIZMatrix;ExpXIYMatrix;ExpXXIMatrix;ExpXXXMatrix;ExpXXZMatrix;\
ExpXXYMatrix;ExpXZIMatrix;ExpXZXMatrix;ExpXZZMatrix;ExpXZYMatrix;ExpXYIMatrix;\
ExpXYXMatrix;ExpXYZMatrix;ExpXYYMatrix;ExpZIIMatrix;ExpZIXMatrix;ExpZIZMatrix;\
ExpZIYMatrix;ExpZXIMatrix;ExpZXXMatrix;ExpZXZMatrix;ExpZXYMatrix;ExpZZIMatrix;\
ExpZZXMatrix;ExpZZZMatrix;ExpZZYMatrix;ExpZYIMatrix;ExpZYXMatrix;ExpZYZMatrix;\
ExpZYYMatrix;ExpYIIMatrix;ExpYIXMatrix;ExpYIZMatrix;ExpYIYMatrix;ExpYXIMatrix;\
ExpYXXMatrix;ExpYXZMatrix;ExpYXYMatrix;ExpYZIMatrix;ExpYZXMatrix;ExpYZZMatrix;\
ExpYZYMatrix;ExpYYIMatrix;ExpYYXMatrix;ExpYYZMatrix;ExpYYYMatrix]\"\>"], \
"Output",
 CellChangeTimes->{3.718729670538804*^9}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{759, 833},
WindowMargins->{{Automatic, 462}, {48, Automatic}},
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 102, 1, 72, "Chapter"],
Cell[685, 25, 2677, 77, 240, "Input"],
Cell[3365, 104, 1523, 42, 107, "Input"],
Cell[4891, 148, 94, 1, 30, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5022, 154, 106, 1, 72, "Chapter"],
Cell[CellGroupData[{
Cell[5153, 159, 136, 2, 70, "Section"],
Cell[5292, 163, 1616, 54, 335, "Input"],
Cell[6911, 219, 1057, 28, 88, "Input"],
Cell[CellGroupData[{
Cell[7993, 251, 423, 12, 30, "Input"],
Cell[8419, 265, 245, 3, 30, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8725, 275, 153, 3, 72, "Chapter"],
Cell[8881, 280, 2558, 61, 88, "Input"],
Cell[11442, 343, 844, 25, 107, "Input"],
Cell[CellGroupData[{
Cell[12311, 372, 169, 3, 30, "Input"],
Cell[12483, 377, 495, 6, 183, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13015, 388, 170, 3, 30, "Input"],
Cell[13188, 393, 134, 2, 30, "Output"]
}, Open  ]],
Cell[13337, 398, 896, 15, 259, "Input"],
Cell[CellGroupData[{
Cell[14258, 417, 1287, 31, 88, "Input"],
Cell[15548, 450, 53253, 679, 30735, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68838, 1134, 697, 22, 50, "Input"],
Cell[69538, 1158, 356, 5, 88, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69931, 1168, 830, 26, 69, "Input"],
Cell[70764, 1196, 939, 13, 254, "Output"]
}, Open  ]]
}, Open  ]]
}
]
*)

